import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler
from database import save_user, save_message, create_support_ticket, save_media_file
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MAIN_MENU, MANAGER_DIALOG, REPORT_ISSUE, WAITING_MEDIA = range(4)

def create_main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üë®‚Äçüíº –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É")],
        [KeyboardButton("‚ö†Ô∏è –û—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏")],
        [KeyboardButton("üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")],
        [KeyboardButton("üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"), KeyboardButton("üí∞ –†–∞—Å—á–µ—Ç –ó–ü")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_back_menu():
    """–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    return ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]], resize_keyboard=True)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    save_user(user.id, user.first_name, user.username)
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.first_name}! 
–Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=create_main_menu()
    )
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "üë®‚Äçüíº –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É":
        save_message(user_id, "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É", 'user')
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=create_back_menu()
        )
        return MANAGER_DIALOG
    
    elif text == "‚ö†Ô∏è –û—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏":
        save_message(user_id, "–û—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", 'user')
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ:",
            reply_markup=create_back_menu()
        )
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        ticket_id = create_support_ticket(user_id, "–û—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ (–Ω–∞—á–∞–ª–æ)", 'violation_report')
        context.user_data['current_ticket_id'] = ticket_id
        return REPORT_ISSUE
    
    elif text == "üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏":
        save_message(user_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", 'user')
        org_info = """
üè¢ –ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:
‚Ä¢ –û—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2010 –≥–æ–¥—É
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: IT —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –®—Ç–∞—Ç: 50+ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã: +7 (XXX) XXX-XX-XX

–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –Ω–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Ä–∞–∑–≤–∏—Ç–∏—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
        """
        await update.message.reply_text(org_info, reply_markup=create_main_menu())
        return MAIN_MENU
    
    elif text == "üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã":
        save_message(user_id, "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", 'user')
        schedule = """
üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:
–ü–Ω-–ü—Ç: 9:00 - 18:00
–°–±: 10:00 - 15:00
–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π
–û–±–µ–¥: 13:00 - 14:00

‚ö° –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
        """
        await update.message.reply_text(schedule, reply_markup=create_main_menu())
        return MAIN_MENU
    
    elif text == "üí∞ –†–∞—Å—á–µ—Ç –ó–ü":
        save_message(user_id, "–†–∞—Å—á–µ—Ç –ó–ü", 'user')
        salary_info = """
üí∞ –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã:

‚Ä¢ –û–∫–ª–∞–¥: —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–µ–º–∏–∏: –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ KPI
‚Ä¢ –ù–∞–¥–±–∞–≤–∫–∏: –∑–∞ —Å—Ç–∞–∂ –∏ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –ê–≤–∞–Ω—Å: 40% 15-–≥–æ —á–∏—Å–ª–∞
‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: 5-–≥–æ —á–∏—Å–ª–∞

üìä –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.
        """
        await update.message.reply_text(salary_info, reply_markup=create_main_menu())
        return MAIN_MENU
    
    elif text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        save_message(user_id, "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 'user')
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_main_menu()
        )
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('current_ticket_id', None)
        return MAIN_MENU
    
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é:",
            reply_markup=create_main_menu()
        )
        return MAIN_MENU

async def handle_manager_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        save_message(user_id, "–û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É", 'user')
        await update.message.reply_text(
            "–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=create_main_menu()
        )
        return MAIN_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_message(user_id, text, 'user')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    ticket_id = create_support_ticket(user_id, text, 'manager_request')
    
    await update.message.reply_text(
        f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
        reply_markup=create_main_menu()
    )
    
    return MAIN_MENU

async def handle_media_file(update: Update, context: ContextTypes.DEFAULT_TYPE, ticket_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    user_id = update.effective_user.id
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        if update.message.photo:
            file = await update.message.photo[-1].get_file()
            file_type = 'photo'
            caption = update.message.caption
        elif update.message.video:
            file = await update.message.video.get_file()
            file_type = 'video'
            caption = update.message.caption
        elif update.message.document:
            file = await update.message.document.get_file()
            file_type = 'document'
            caption = update.message.caption
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.",
                reply_markup=create_back_menu()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        file_extension = '.jpg' if file_type == 'photo' else os.path.splitext(file.file_path)[1] if file.file_path else '.bin'
        filename = f"{user_id}_{ticket_id}_{file.file_id}{file_extension}"
        file_path = os.path.join('media', filename)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É media –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('media', exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await file.download_to_drive(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É
        save_media_file(user_id, ticket_id, file.file_id, file_type, filename, caption)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–∞–π–ª–µ
        media_message = f"–ü—Ä–∏–∫—Ä–µ–ø–∏–ª {file_type}: {filename}"
        if caption:
            media_message += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {caption}"
        save_message(user_id, media_message, 'user')
        
        await update.message.reply_text(
            "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –æ—Ç—á–µ—Ç—É! –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª")],
                [KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç")]
            ], resize_keyboard=True)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_back_menu()
        )

async def handle_report_issue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏"""
    user_id = update.effective_user.id
    current_ticket_id = context.user_data.get('current_ticket_id')
    
    if not current_ticket_id:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        current_ticket_id = create_support_ticket(user_id, "–û—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", 'violation_report')
        context.user_data['current_ticket_id'] = current_ticket_id
    
    if update.message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        save_message(user_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", 'user')
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=create_main_menu()
        )
        context.user_data.pop('current_ticket_id', None)
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if update.message.text and update.message.text not in ["‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª", "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç"]:
        save_message(user_id, update.message.text, 'user')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        from database import update_ticket_status
        update_ticket_status(current_ticket_id, 'open', f"–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {update.message.text}")
        
        await update.message.reply_text(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ?",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("‚úÖ –î–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")],
                [KeyboardButton("‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç")]
            ], resize_keyboard=True)
        )
        return WAITING_MEDIA
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    elif update.message.photo or update.message.video or update.message.document:
        await handle_media_file(update, context, current_ticket_id)
        return REPORT_ISSUE
    
    return REPORT_ISSUE

async def handle_media_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    current_ticket_id = context.user_data.get('current_ticket_id')
    
    if text == "‚úÖ –î–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª":
        save_message(user_id, "–†–µ—à–∏–ª –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", 'user')
        await update.message.reply_text(
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞")]], resize_keyboard=True)
        )
        return REPORT_ISSUE
    
    elif text == "‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç" or text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞":
        save_message(user_id, "–ó–∞–≤–µ—Ä—à–∏–ª –æ—Ç—á–µ—Ç –±–µ–∑ —Ñ–∞–π–ª–∞", 'user')
        await update.message.reply_text(
            f"‚úÖ –û—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ #{current_ticket_id} –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.",
            reply_markup=create_main_menu()
        )
        context.user_data.pop('current_ticket_id', None)
        return MAIN_MENU
    
    elif text == "‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª":
        save_message(user_id, "–•–æ—á–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª", 'user')
        await update.message.reply_text(
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç")]], resize_keyboard=True)
        )
        return REPORT_ISSUE
    
    elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç":
        save_message(user_id, "–ó–∞–≤–µ—Ä—à–∏–ª –æ—Ç—á–µ—Ç —Å —Ñ–∞–π–ª–∞–º–∏", 'user')
        await update.message.reply_text(
            f"‚úÖ –û—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ #{current_ticket_id} –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            reply_markup=create_main_menu()
        )
        context.user_data.pop('current_ticket_id', None)
        return MAIN_MENU
    
    return WAITING_MEDIA

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    user_id = update.effective_user.id
    save_message(user_id, "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è", 'user')
    
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=create_main_menu()
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('current_ticket_id', None)
    
    return MAIN_MENU

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_main_menu()
        )
    
    return MAIN_MENU

def register_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # ConversationHandler –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
            ],
            MANAGER_DIALOG: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manager_dialog)
            ],
            REPORT_ISSUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_report_issue),
                MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, handle_report_issue)
            ],
            WAITING_MEDIA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_media_decision),
                MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, handle_report_issue)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_handler)],
        allow_reentry=True
    )
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
